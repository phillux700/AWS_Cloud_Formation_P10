---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This template creates the EC2 instances and manages the scaling. 
    Author: Philippe Traon <ptraon@pm.me>
Parameters:
  VPC:
    Description: VPC 
    Type: "AWS::EC2::VPC::Id"
  ServerEnv:
    Description: "Server Environment name."
    Type: "String"  
  KeyName:
    Description: "Enter an existing EC2 KeyPair."
    Type: "String"  
  PublicSubnets:
    Description: "Subnets to launch instances into"
    Type: "List<AWS::EC2::Subnet::Id>" 
  PublicSubnet1:
    Description: "Public Subnet 1"
    Type: "String"
  PublicSubnet2:
    Description: "Public Subnet 2"
    Type: "String"  
  PublicSubnet1CIDR:
    Description: "Public Subnet 1 CIDR"
    Type: "String" 
  PublicSubnet2CIDR:
    Description: "Public Subnet 2 CIDR"
    Type: "String"   
  InstanceType:
    Description: "The type of ec2 instance"
    Type: "String"  
  ImageId:
    Description: "The chosen AMI image"
    Type: "String"  
  EC2SG:
    Description: "Security Group for the load balancer"
    Type: "AWS::EC2::SecurityGroup::Id"  
  ALBTargetGroup:
    Description: "Target Group"
    Type: "String"  
  RdsDbId:
    Description: "RDS DB ID"
    Type: "String"  
  DbName: 
    Description: "RDS DB Name"
    Type: "String" 
  RdsDbURL: 
    Description: "RDS DB URL"
    Type: "String" 
  RdsDbPORT: 
    Description: "RDS DB PORT"
    Type: "String" 
  DbUser: 
    Description: "RDS DB User"
    Type: "String" 
  DbPassword:     
    Description: "RDS DB Password"
    Type: "String" 
  ALBDNSName:
    Description: "ALB DNS Name"
    Type: "String" 
  AccessKeyID: 
    Description: "Access Key Id for S3 Bucket"
    Type: "String"
  SecretAccessKey: 
    Description: "Secret Key Id for S3 Bucket"
    Type: "String"
  BucketName: 
    Description: "Bucket Name"
    Type: "String"
  User:   
    Description: "User Name"
    Type: "String"
  VolumeName:  
    Description: "Volume EFS name"
    Type: "String" 

Resources:

  ################################### STOCKAGE EFS #######################################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/quickref-efs.html
  ###########################
  MountTargetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Security group for mount target
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: !Ref PublicSubnet1CIDR
      - IpProtocol: tcp
        FromPort: '2049'
        ToPort: '2049'
        CidrIp: !Ref PublicSubnet2CIDR
  ## Création du service EFS      
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      BackupPolicy:
        Status: DISABLED
      Encrypted: false
      LifecyclePolicies:
        - TransitionToIA: AFTER_60_DAYS
      ThroughputMode: bursting
      FileSystemTags:
      - Key: Name
        Value:
          Ref: VolumeName
  ## Création de la target de montage pour le public subnet 1
  MountTarget1:
    Type: AWS::EFS::MountTarget
    DependsOn: 
      - EFSFileSystem
      - MountTargetSecurityGroup
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet1
      SecurityGroups: 
        - !Ref MountTargetSecurityGroup

  ## Création de la target de montage pour le public subnet 2
  MountTarget2:
    Type: AWS::EFS::MountTarget
    DependsOn: 
      - EFSFileSystem
      - MountTargetSecurityGroup
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref MountTargetSecurityGroup

  ################################### SCALING GROUP #######################################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-group.html
  ###########################
  ApplicationScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ApplicationLaunchConfig
      VPCZoneIdentifier: !Ref PublicSubnets
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 3
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  ################################### SCALING POLICY #######################################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-policy.html
  # https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scale-based-on-demand.html
  ###########################
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationScalingGroup
      Cooldown: '60'
      ScalingAdjustment: 1
  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationScalingGroup
      Cooldown: '60'
      ScalingAdjustment: -1       

  ################################### LAUNCH CONFIG #######################################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-as-launchconfig.html
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html
  # https://openclassrooms.com/fr/courses/2035766-optimisez-votre-deploiement-en-creant-des-conteneurs-avec-docker
  # https://hub.docker.com/r/conetix/wordpress-with-wp-cli/
  # https://developer.wordpress.org/cli/commands/core/install/
  # https://kinsta.com/fr/base-de-connaissances/amazon-s3-wordpress/
  # https://docs.aws.amazon.com/efs/latest/ug/installing-amazon-efs-utils.html#installing-other-distro
  # 
  # Connection via CLI: ssh -i <KEY_NAME>.pem ubuntu@<INSTANCE_IP>

  # docker-compose up -d
  ###########################
  ApplicationLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: 
      - EFSFileSystem
    Properties:
      EbsOptimized: false
      KeyName: !Ref KeyName
      AssociatePublicIpAddress: true
      ImageId: ami-035837f5f05288cef
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref EC2SG
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update
          apt install stress docker.io -y
          systemctl start docker
          systemctl enable docker
          cd /var
          mkdir www 
          cd www
          mkdir html
          cd html
          docker run --name wordpress -e WORDPRESS_DB_HOST=${RdsDbURL}:${RdsDbPORT} -e WORDPRESS_DB_USER=${DbUser} -e WORDPRESS_DB_PASSWORD=${DbPassword} -e WORDPRESS_DB_NAME=${DbName} -p 80:80 -p 443:443 -v `pwd`:`pwd` -w `pwd` -d conetix/wordpress-with-wp-cli
          sleep 10
          docker exec wordpress wp core config --dbname=${DbName} --dbuser=${DbUser} --dbpass=${DbPassword} --dbprefix=wp_ --dbhost=${RdsDbURL}
          chmod 666 wp-config.php
          sed -i "20i\define( 'AS3CF_SETTINGS', serialize( array('provider' => 'aws','bucket' => 's3bucketp10','access-key-id' => '${AccessKeyID}','secret-access-key' => '${SecretAccessKey}','copy-to-s3' => true,'enable-object-prefix' => true,'object-prefix' => 'wp-content/uploads/','serve-from-s3' => true )));" wp-config.php
          docker exec wordpress wp core install --url=${ALBDNSName} --title=Projet10 --admin_user=admin --admin_password='password' --admin_email=ptraon@gmail.com
          docker exec wordpress wp theme install quark
          docker exec wordpress wp theme activate quark
          docker exec wordpress wp plugin install amazon-s3-and-cloudfront --activate
          apt install git binutils -y
          cd /root
          git clone https://github.com/aws/efs-utils
          cd efs-utils
          ./build-deb.sh
          apt -y install ./build/amazon-efs-utils*deb
          mkdir /wp_data
          cat << EOF >> /etc/fstab
          echo "${EFSFileSystem}:/ /wp_data efs   _netdev,noresvport,tls 0 0" >> /etc/fstab  
          mount /wp_data 
          sleep 20
        # mount -t efs -o tls ${EFSFileSystem}:/ efs
        # sleep 20
        # mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFSFileSystem}.efs.eu-west-1.amazonaws.com:/ efs
        # sleep 20   

        
Outputs:

  ScalingGroup: 
    Description: "Auto Scaling Group Reference ID"
    Value: !Ref "ApplicationScalingGroup"

  ScaleUpPolicy: 
    Description: "Auto Scaling Up Policy Reference ID"
    Value: !Ref "ScaleUpPolicy"

  ScaleDownPolicy: 
    Description: "Auto Scaling Down Policy Reference ID"
    Value: !Ref "ScaleDownPolicy"      

  MountTargetID1:
    Description: Mount target ID 1
    Value: !Ref MountTarget1
  MountTargetID2:
    Description: Mount target ID 2
    Value: !Ref MountTarget2    
  FileSystemID2:
    Description: File system ID
    Value: !Ref EFSFileSystem         