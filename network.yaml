# Summary:
#
# I) Network:
#   1) VPC
#   2) Subnets
#   3) Internet Gateway
#   4) Routes Tables & Routes
#   5) Elastic Ips and NAT Gateways
#
# II) Infra:
#   1) EC2
---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This stack deploys:
    - VPC with private and public subnets in two Availability Zones.
    - An Internet Gateway
    - NAT Gateway
Parameters:
  ServerEnv:
    Description: "Server Environment name."
    ConstraintDescription: "Choose an Environment from the drop down"
    Type: "String"
    AllowedValues: 
      - "dev"
      - "staging"
      - "prod"
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: Entre le CIDR block principal.
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.100.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.101.0/24
  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.102.0/24  
  Zone1:
    Description: Please enter the first Availability Zone
    Type: String
    Default: eu-west-1a
  Zone2:
    Description: Please enter the second Availability Zone
    Type: String
    Default: eu-west-1b
  Zone3:
    Description: Please enter the third Availability Zone
    Type: String
    Default: eu-west-1c  
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - f1.2xlarge
      - f1.16xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.32xlarge
      - x1.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type.
  DBClass:
    Description: The database instance type
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t1.micro
      - db.m1.small
      - db.m1.medium
      - db.t2.micro
    ConstraintDescription: must select a valid database instance type.
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    Default: admin
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '21'
    ConstraintDescription: must be between 5 and 21Gb.  
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64  
  AWSRegionArch2AMI:
    eu-west-1:
      HVM64: ami-015232c01a82b847b
    eu-west-2:
      HVM64: ami-0765d48d7e15beb93
    eu-west-3:
      HVM64: ami-0caf07637eda19d9c
     

Resources:
  
  ###############################################################################################
  ##################################### NETWORK #################################################
  ###############################################################################################

  ################################### VPC #######################################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/fr_fr/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
  # Réseau privé virtuel (section réseau isolée résidant dans une région AWS)
  ###########################
  VPC10:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-VPC10"  


  ################################### SUBNETS ###################################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
  # Sous-réseau = portion d'un VPC
  # Sous-réseau public => comporte une route permettant au trafic d'être routé vers l'extérieur et depuis l'intérieur.
  # Sous-réseau privé => ne permet pas l'accès depuis l'extérieur
  ###########################
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC10
      AvailabilityZone: !Ref Zone1
      CidrBlock: !Ref PublicSubnet1CIDR
      #MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-${PublicSubnet1CIDR}-PublicSubnet1 (AZ A)"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC10
      AvailabilityZone: !Ref Zone2
      CidrBlock: !Ref PublicSubnet2CIDR
      #MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-${PublicSubnet2CIDR}-PublicSubnet2 (AZ B)"  

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC10
      AvailabilityZone: !Ref Zone1
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-${PrivateSubnet1CIDR}-PrivateSubnet1 (AZ A)"       
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC10
      AvailabilityZone: !Ref Zone2
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-${PrivateSubnet2CIDR}-PrivateSubnet2 (AZ B)"      
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC10
      AvailabilityZone: !Ref Zone3
      CidrBlock: !Ref PrivateSubnet3CIDR
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-${PrivateSubnet3CIDR}-PrivateSubnet3 (AZ C)" 

  ########################################## INTERNET GATEWAY #########################################         

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
  # Passerelle Internet => permet de router du trafic réseau dans et hors du VPC.
  ###########################        
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-IGW"

  ######################################### VPC GATEWAY ATTACHMENT ###################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
  # Nous devons associer notre passerelle Internet à notre VPC.
  ###########################
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC10
      InternetGatewayId: !Ref InternetGateway

  ######################################## ROUTE TABLES #############################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
  ###########################
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC10
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-PublicRoute1" 
  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC10
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-PublicRoute2"

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC10
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-PrivateRoute1"
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC10
      Tags:
        - Key: Name
          Value: !Sub "${ServerEnv}-PrivateRoute2"
          
  ###################################### PUBLIC ROUTES ##############################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
  # On crée une route vers la passerelle de sortie.
  ###########################                 
  PublicRoute1:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable1
  PublicRoute2:
    Type: AWS::EC2::Route
    Properties:
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable2
      
  ###################################### SUBNETS ROUTE TABLES ASSOCIATIONS #########################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
  # Ici, on associe un table de routage à un sous-réseau.
  ###########################    
  AttachPublicRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable1
      SubnetId: !Ref PublicSubnet1
  AttachPublicRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable2
      SubnetId: !Ref PublicSubnet2 
      
  AttachPrivateRouteTable1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1 
  AttachPrivateRouteTable2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2 
      
  ################################### ELASTIC IPs #################################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-eip.html
  # Une IP élastique est un eadresse IPv4 publique accessible depuis Internet.
  ########################### 
  NatEip1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatEip2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  ################################## NAT GATEWAYS ################################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-natgateway.html
  # Une passerelle NAT = une adresse IP élastique !
  # NAT = Network Address Translation
  # On associe une passerelle NAT à chaque réseau public.
  # Pré-requis: un sous-réseau, une IP élastique, une passerelle internet attachée au VPC.
  ###########################     
  NatGateway1:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: VPC10-nat-a (AZ A)
  NatGateway2:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: VPC10-nat-b (AZ B)   

  ################################## PRIVATE ROUTES #############################################

  ###### DOCUMENTATION ######
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
  ###########################                     
  NatPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  NatPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2       

  
  ###############################################################################################
  ##################################### INFRA ###################################################
  ###############################################################################################

  ################################## SECURITY #############################################

  ###### DOCUMENTATION ######
  #
  # Le Security Group à associer au Load Balancer
  ###########################  
  
  WebsiteSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access
      #SecurityGroupEgress:
      #  - IpProtocol: -1
      #    CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC10
  
  ###### DOCUMENTATION ######
  #
  ###########################  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref WebsiteSecurityGroup  

  ###### DOCUMENTATION ######
  #
  ########################### 
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP    

  ###### DOCUMENTATION ######
  #
  ###########################         
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC10

  ###### DOCUMENTATION ######
  #
  ########################### 
  ApplicationScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref ApplicationLaunchConfig
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      DesiredCapacity: 2
      MinSize: 2
      MaxSize: 3
      TargetGroupARNs:
        - !Ref ALBTargetGroup

  ###### DOCUMENTATION ######
  #
  ########################### 
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationScalingGroup
      Cooldown: '60'
      ScalingAdjustment: 1
  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ApplicationScalingGroup
      Cooldown: '60'
      ScalingAdjustment: -1    

  ###### DOCUMENTATION ######
  #
  ###########################    
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS Database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ###### DOCUMENTATION ######
  #
  ###########################
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebsiteSecurityGroup
      VpcId: !Ref VPC10     

  ###### DOCUMENTATION ######
  #
  ###########################
  MasterDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: !Ref DBAllocatedStorage
      DBInstanceClass: !Ref DBClass
      Engine: MySQL
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      StorageType: gp2
      PubliclyAccessible: false
      AvailabilityZone: !Ref Zone1
      Tags:
        - Key: Name
          Value: !Sub '${ServerEnv}-MasterDatabase'
      VPCSecurityGroups:
        - !GetAtt 
          - DBEC2SecurityGroup
          - GroupId
    DeletionPolicy: Delete

  ###### DOCUMENTATION ######
  #
  ###########################
  ReplicaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      SourceDBInstanceIdentifier: !Ref MasterDB
      DBInstanceClass: !Ref DBClass
      AvailabilityZone: !Ref Zone2
      Tags:
        - Key: Name
          Value: Read Replica Database    

  ApplicationLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebsiteSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install httpd php php-mysql -y
          service httpd start
          systemctl enable httpd
          echo "<h1>Hello World</h1>" >> /var/www/html/index.html 

Outputs: 

  VPC: 
    Description: "A reference to the created VPC"
    Value: !Ref VPC10
    Export:
      Name: !Sub "${ServerEnv}-VPC"

  PublicSubnets:
    Description: "A list of the public subnets"
    Value: !Join [ ",", [ !Ref "PublicSubnet1", !Ref "PublicSubnet2" ]]
    Export:
      Name: !Sub "${ServerEnv}-PublicSubnets"

  PrivateSubnets:
    Description: "A list of the private subnets"
    Value: !Join [ ",", [ !Ref "PrivateSubnet1", !Ref "PrivateSubnet2" ]]
    Export:
      Name: !Sub "${ServerEnv}-PrivateSubnets"

  PublicSubnet1:
    Description: "A reference to the public subnet in the 1st Availability Zone"
    Value: !Ref PublicSubnet1
    Export:
      Name: "PublicSubnet1"

  PublicSubnet2: 
    Description: "A reference to the public subnet in the 2nd Availability Zone"
    Value: !Ref PublicSubnet2
    Export:
      Name: "PublicSubnet2"

  PrivateSubnet1:
    Description: "A reference to the private subnet in the 1st Availability Zone"
    Value: !Ref PrivateSubnet1
    Export:
      Name: "PrivateSubnet1"

  PrivateSubnet2: 
    Description: "A reference to the private subnet in the 2nd Availability Zone"
    Value: !Ref PrivateSubnet2  
    Export:
      Name: "PrivateSubnet2" 