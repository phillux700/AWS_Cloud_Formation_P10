---
AWSTemplateFormatVersion: "2010-09-09"
Description: >
    This is a master template to create :
    1) a high-available Web Application Architecture.
        - A VPC
        - An Internet Gateway attached to the VPC.
        - 2 private subnets in 2 available zones (one RDS Master in eu-west-1a and one replica in eu-west-1b).
        - 2 public subnets for 2 EC2 instances (Wordpress installed with Docker).
        - 1 Security Group for EC2 and 1 other for RDS.
        - Route Tables, Routes And Route Tables associated with their subnets.
        - 1 LoadBalancer to handle both EC2 instances.
        - 1 Auto-scaling (one more instance if CPU > 80%)
        - A CloudWatch Alarm and a SNS notification.

    2) an intranet through a VPN connection.

    Author: Philippe Traon <ptraon@pm.me>

Parameters:

  ServerEnv:
      Description: "Server Environment name."
      ConstraintDescription: "Choose an Environment from the drop down"
      Type: "String"
      AllowedValues: 
        - "dev"
        - "staging"
        - "prod"
      Default: "dev"
  KeyName:
    NoEcho: 'true'
    Description: Enter an existing EC2 KeyPair in order to connect via SSH & CLI
    Type: "String" 
    Default: "cle_aws"   
  VpcCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: Enter the CidrBlock.  
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.1.0/24
  PublicSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.100.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.101.0/24
  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.102.0/24  
  Zone1:
    Description: Please enter the first Availability Zone
    Type: String
    Default: eu-west-1a
  Zone2:
    Description: Please enter the second Availability Zone
    Type: String
    Default: eu-west-1b
  Zone3:
    Description: Please enter the third Availability Zone
    Type: String
    Default: eu-west-1c  
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type.      
  DBClass:
    Description: The database instance type
    Type: String
    Default: db.t2.micro
    AllowedValues:
      - db.t1.micro
      - db.m1.small
      - db.m1.medium
      - db.t2.micro
    ConstraintDescription: must select a valid database instance type.
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The WordPress database admin account username
    Type: String
    Default: admin
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The WordPress database admin account password
    Type: String
    Default: password
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  DBSize:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '21'
    ConstraintDescription: must be between 5 and 21Gb.  
  MyIP:
    NoEcho: 'true'
    Description: "My own IP ton connect EC2 via SSH" 
    Type: String
    Default: 'XX.XX.XX.XX/24'
  TemplateURL:
      Description: "Enter an existing S3 Cloudformation Bucket."
      Type: "String"
      Default: "https://p10aws.s3-eu-west-1.amazonaws.com/infra"
  IPtoAllow:
    NoEcho: 'true'
    Description: "IP to connect via VPN" 
    Type: String
    Default: 'XX.XX.XX.XX/24'
  VolumeName:
    Description: The name to be used for the EFS volume
    Type: String
    MinLength: '1'
    Default: myEFSvolume  

Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64  
  AWSRegionArch2AMI:
    eu-west-1:
      HVM64: ami-015232c01a82b847b
    eu-west-2:
      HVM64: ami-0765d48d7e15beb93
    eu-west-3:
      HVM64: ami-0caf07637eda19d9c       

Resources:  

  Network:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${TemplateURL}/network.yaml"
      Tags:
        - Key: Name
          Value: Network Stack 
      Parameters:
        VpcCidrBlock: !Ref VpcCidrBlock
        ServerEnv: !Ref ServerEnv
        PublicSubnet1CIDR: !Ref PublicSubnet1CIDR
        PublicSubnet2CIDR: !Ref PublicSubnet2CIDR
        PublicSubnet3CIDR: !Ref PublicSubnet3CIDR
        PrivateSubnet1CIDR: !Ref PrivateSubnet1CIDR
        PrivateSubnet2CIDR: !Ref PrivateSubnet2CIDR
        PrivateSubnet3CIDR: !Ref PrivateSubnet3CIDR
        Zone1: !Ref Zone1
        Zone2: !Ref Zone2
        Zone3: !Ref Zone3
      Tags:
        - Key: Name
          Value: Network Stack   

  SecurityGroup:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: 
      - Network
    Properties:
      TemplateURL: !Sub "${TemplateURL}/securitygroup.yaml"
      Parameters:
        ServerEnv: !Ref ServerEnv
        VPC: !GetAtt "Network.Outputs.VPC"  
        MyIP: !Ref MyIP
        IPtoAllow: !Ref IPtoAllow
      Tags:
        - Key: Name
          Value: SecurityGroup Stack        

  S3:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: 
      - Network
    Properties:
      TemplateURL: !Sub "${TemplateURL}/s3.yaml"
      Parameters:
        ServerEnv: !Ref ServerEnv       

  RDS:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: 
      - SecurityGroup
    Properties:
      TemplateURL: !Sub "${TemplateURL}/rds.yaml"
      Parameters:
        ServerEnv: !Ref ServerEnv 
        DBName: !Ref DBName
        DBSize: !Ref DBSize
        DBClass: !Ref DBClass
        Engine: MySQL
        DBUser: !Ref DBUser
        DBPassword: !Ref DBPassword
        Zone1: !Ref Zone1
        Zone2: !Ref Zone2
        RDSSG: !GetAtt "SecurityGroup.Outputs.RDSSG"
        PrivateSubnets: !GetAtt "Network.Outputs.PrivateSubnets"
        PrivateSubnet1: !GetAtt "Network.Outputs.PrivateSubnet1"
        PrivateSubnet2: !GetAtt "Network.Outputs.PrivateSubnet2"
      Tags:
        - Key: Name
          Value: RDS Stack     

  LoadBalancer:
    Type: "AWS::CloudFormation::Stack" 
    Properties:
      TemplateURL: !Sub "${TemplateURL}/loadbalancer.yaml"
      Parameters:
        ServerEnv: !Ref ServerEnv
        VPC: !GetAtt "Network.Outputs.VPC" 
        EC2SG: !GetAtt "SecurityGroup.Outputs.EC2SG"
        PublicSubnets: !GetAtt "Network.Outputs.PublicSubnets" 
      Tags:
        - Key: Name
          Value: LoadBalancer Stack        

  AutoScaling:
    Type: "AWS::CloudFormation::Stack" 
    Properties:
      TemplateURL: !Sub "${TemplateURL}/autoscaling.yaml"  
      Parameters:
        ServerEnv: !Ref ServerEnv
        KeyName: !Ref KeyName
        PublicSubnets: !GetAtt "Network.Outputs.PublicSubnets" 
        InstanceType: !Ref InstanceType
        ImageId: !FindInMap 
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap 
          - AWSInstanceType2Arch
          - !Ref InstanceType
          - Arch
        EC2SG: !GetAtt "SecurityGroup.Outputs.EC2SG"  
        ALBTargetGroup: !GetAtt "LoadBalancer.Outputs.ALBTargetGroup"
        RdsDbId: !GetAtt "RDS.Outputs.RdsDbId"
        DbName: !GetAtt "RDS.Outputs.DbName"
        RdsDbURL: !GetAtt "RDS.Outputs.RdsDbURL"
        RdsDbPORT: !GetAtt "RDS.Outputs.RdsDbPORT"
        DbUser: !GetAtt "RDS.Outputs.DbUser"
        DbPassword: !GetAtt "RDS.Outputs.DbPassword"
        ALBDNSName: !GetAtt "LoadBalancer.Outputs.ALBDNSName"
        AccessKeyID: !GetAtt "S3.Outputs.AccessKeyID"
        SecretAccessKey: !GetAtt "S3.Outputs.SecretAccessKey"
        BucketName: !GetAtt "S3.Outputs.BucketName"
        User: !GetAtt "S3.Outputs.User"
        PublicSubnet1: !GetAtt "Network.Outputs.PublicSubnet1"
        PublicSubnet2: !GetAtt "Network.Outputs.PublicSubnet2"
        VPC: !GetAtt "Network.Outputs.VPC"
        VolumeName: !Ref VolumeName
      Tags:
        - Key: Name
          Value: AutoScaling Stack       

  CloudWatch:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - "AutoScaling"
    Properties:
      TemplateURL: !Sub "${TemplateURL}/cloudwatch.yaml"
      TimeoutInMinutes: '5'
      Parameters:
        ScalingGroup: !GetAtt "AutoScaling.Outputs.ScalingGroup"
        ScaleUpPolicy: !GetAtt "AutoScaling.Outputs.ScaleUpPolicy"
        ScaleDownPolicy: !GetAtt "AutoScaling.Outputs.ScaleDownPolicy"
        SNSTopic: !GetAtt "SNS.Outputs.SNSTopic"
      Tags:
        - Key: Name
          Value: CloudWatch Stack   

  VPNIntranet:
    Type: "AWS::CloudFormation::Stack"  
    Properties:
      TemplateURL: !Sub "${TemplateURL}/vpn_intranet.yaml"  
      Parameters:
        ServerEnv: !Ref ServerEnv
        KeyName: !Ref KeyName
        InstanceType: !Ref InstanceType
        VPNSG: !GetAtt "SecurityGroup.Outputs.VPNSG"  
        IntranetSG: !GetAtt "SecurityGroup.Outputs.IntranetSG" 
        PublicSubnet3: !GetAtt "Network.Outputs.PublicSubnet3"
        PrivateSubnet3: !GetAtt "Network.Outputs.PublicSubnet3"
        IPtoAllow: !Ref IPtoAllow
        MyIP: !Ref MyIP
      Tags:
        - Key: Name
          Value: VPN and Intranet Stack      

  SNS:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub "${TemplateURL}/sns.yaml"
      Tags:
        - Key: Name
          Value: SNS Stack      

Outputs: 

  DNSLoadBalancer: 
    Description: "Dns loadbalancer"
    Value: !GetAtt "LoadBalancer.Outputs.ALBDNSName"          




